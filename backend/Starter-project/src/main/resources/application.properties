# Aplikacja se "vrti" na Tomcat-ovom serveru. Tomcat je ugradjeni web server u okviru spring boot aplikacije.
# Njega smo ugradili tako sto smo instalirali dependency "spring-boot-starter-web".
 

spring.jpa.database = POSTGRESQL
spring.datasource.platform = postgres
# definisanje sistema sa kojim radimo, kada govorimo o bazi podataka(postgres-ov server)   

spring.jpa.show-sql = true
# koristan property koji nam omogucava da prilikom izvrsavanja sql upita, bili to iz web browsera, 
# iz angular aplikacije ili od negde drugo, mozemo da vidimo log upita u konzoli

spring.datasource.driver-class-name = org.postgresql.Driver


# parametri za konekciju
spring.datasource.url = jdbc:postgresql://localhost:5432/postgres
spring.datasource.username = postgres
spring.datasource.password = postgres


# port pomocu kojeg pristupamo app
server.port = 8083


# disable driver's feature detection 
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults = false


# without detection you have to set the dialect by hand
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

spring.jackson.serialization.fail-on-empty-beans = false
# sprecavamo springboot aplikaciju da se ne pokrene u slucaju da su neki bean-ovi prazni



# prilikom pokretanja spring aplikacije automatski se izvrsava zadati skript
spring.jpa.hibernate.ddl-auto=create
spring.datasource.initialization-mode=always
spring.datasource.data=classpath:sqlScripts/InsertIntoScript.sql
